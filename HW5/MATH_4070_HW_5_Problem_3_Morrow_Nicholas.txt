
% MATH 4070
% HW 5
% Problem 3
% By Nicholas Morrow

% Load matrices
load('hw5_num3.mat')
A

A =

   -0.4542   -2.0476    1.8376   -2.5342   -1.2951    2.0097   -2.8829    0.6890    3.0507    2.6183
    1.4074    3.0798    6.3720   -1.2526   -5.5803    4.3499   -5.4401    1.8222    3.6505    3.8586
   -2.9619   -3.4327   -2.1671    1.6352   -0.1062   -1.3363   -0.8240   -4.1927   -2.4492    1.1433
   -0.9623    3.6657    1.3360   -0.3502   -4.1088    2.3579   -2.2006    0.6284    0.3286   -1.0644
    4.9691    4.4721    0.3304   -2.6033    3.5751   -1.4475   -0.6064    1.1230    1.6868   -0.6268
   -4.1148   -0.8211    0.1667   -0.4571   -2.4733    0.1300   -2.7340   -2.0246    1.7026   -1.0407
   -1.7836   -2.6335    0.7356    5.0576   -1.9261    0.5628    1.8487   -1.3173   -3.3237    1.6472
    2.3840   -3.4819    1.4672   -1.5573    0.7737    1.0797    1.5168    3.2674    1.0224    3.5267
   -3.1630   -2.7138   -2.5006    0.0349    0.1670   -2.3586    3.5230    0.6824   -0.7522   -3.1377
    0.4581   -4.9388    0.4797    3.5554    2.5234   -1.0956    4.8670    1.2395   -1.2502    1.4564
   -2.0309    4.8491    2.5393   -0.9216   -1.2998    1.0375   -6.1035   -2.4948    5.1910   -2.5628
   -7.2648   -7.2197   -2.5320    2.8863   -1.1702   -1.3476    3.5758   -1.2932   -1.3026   -2.2641
   -0.6344    0.8100    1.3306    1.0837   -0.8667    0.5620    1.3943    1.8246    1.0690   -1.7256
    3.0781    0.8570    0.6763   -0.4879   -0.0842    1.8846    0.9827    2.4820   -1.0107    1.8126
    0.4412   -3.8905    0.6250    7.1236    2.5733   -0.3604    6.3495    0.7144   -3.2229    0.6996
   -0.5876   -4.7713   -0.9162   -2.2513    4.6977   -3.4327    1.2953    0.0243    3.5277   -0.3580
   -4.8914   -8.8209   -2.0340   -6.1637    0.1208   -2.3400   -2.7229   -1.5763    3.9786    2.1223
    2.3790    5.9633   -4.4418   -5.6776    1.2987   -1.0338   -0.2471    1.3724   -0.9101   -4.1958
   -0.9963   -5.0591    0.2085   -2.1131    0.3081    0.6577   -0.0840    1.1062    1.9412    2.3819
    0.4694   -0.0443    1.8870   -3.4258    0.1606   -0.4488   -1.2090    2.1608    4.4282   -0.1622

b

b =

   -2.3584
   -2.1012
   -5.9792
   -3.5774
    9.4442
   -9.7783
   -3.6524
    6.2337
   -2.8352
    3.0864
   -9.5344
  -11.5365
   -1.1623
    6.8548
    2.6423
    0.4617
   -8.1176
    7.3508
   -1.0009
    0.5807


% Part (a)

% Plug into function
x_hat = lsqminnorm(A, b)

x_hat =

   1.0e+06 *

    0.1537
   -1.4095
    3.0400
   -1.3106
    1.1335
    0.3734
   -1.3239
    0.0783
   -2.8301
   -2.3846


% Find the norm of x_hat
norm_x_hat = norm(x_hat)

norm_x_hat =

   5.4634e+06


% Find the norm: ||A*x_hat - b||
norm_residual = norm(A * x_hat - b)

norm_residual =

   3.0789e-05


% Part (b)

% MATLAB rank
rank = rank(A)

rank =

    10


% SVD rank is based on the values in S. The last 3 values are 0 or close to 0, so the rank is 7
S = svd(A)

S =

   24.4281
   18.7883
   15.7581
   14.6169
    7.9410
    7.6759
    2.1204
    0.0000
    0.0000
    0.0000


% Part (c)

% From part (b), use svd rank
r = 7;

% We can do a rank-r approximation using a truncated SVD
[U, S, V] = svd(A, 'econ')

U =

    0.1002    0.2738    0.1215    0.1915    0.0569   -0.0388   -0.3706   -0.2056   -0.1539   -0.1254
    0.3852    0.1712    0.4702    0.2124   -0.0245   -0.1209    0.3308    0.1499   -0.0551    0.3056
   -0.2000    0.1145    0.0717   -0.2162    0.3497    0.3635    0.0839   -0.2530   -0.0276   -0.0468
    0.1987    0.0033    0.1907   -0.1787   -0.0058   -0.3130    0.0058    0.1788   -0.2645   -0.3486
    0.2095   -0.1532   -0.3163    0.1826   -0.1246    0.2510    0.2112    0.3048   -0.1327   -0.3578
    0.0212    0.2459    0.1106   -0.2602   -0.0811   -0.0112    0.0141   -0.4137   -0.2236   -0.2495
   -0.2087   -0.0867    0.3368   -0.0706    0.1167    0.0535    0.2426    0.1889    0.3121   -0.1887
   -0.0405    0.0620    0.0247    0.4626    0.0793   -0.1828   -0.0880   -0.0164   -0.3146    0.1108
   -0.2184    0.0253   -0.1714   -0.1646   -0.1803   -0.3735    0.3179   -0.2490    0.2217    0.3281
   -0.2984   -0.1047    0.0433    0.2595   -0.1777    0.0383    0.0669   -0.0203   -0.1020   -0.3337
    0.3211    0.1985    0.0729   -0.2951   -0.4578    0.3064   -0.3644    0.1292    0.2701    0.0745
   -0.4198    0.1843    0.0787   -0.2857   -0.1672   -0.3213   -0.1702    0.4057   -0.1023   -0.1887
    0.0146   -0.0509    0.0574   -0.0118   -0.3553   -0.2798    0.0018    0.0326   -0.0790    0.1207
    0.0627   -0.1313    0.0409    0.2450    0.1771   -0.1841   -0.2385    0.1233    0.5941   -0.1601
   -0.3607   -0.2925    0.1651    0.1620   -0.2528    0.0928   -0.2038   -0.0798   -0.0146    0.0964
   -0.1594    0.2134   -0.3362    0.1952   -0.3258    0.2246    0.0419    0.1238   -0.0899    0.1887
   -0.1601    0.6553   -0.1849    0.0763    0.2124    0.0104    0.1681    0.3081    0.1131    0.0035
    0.2103   -0.1509   -0.5116   -0.1798    0.2320   -0.3318   -0.1614    0.0037   -0.0364    0.0060
   -0.0904    0.2554    0.0085    0.2442    0.0664   -0.1126   -0.3648   -0.1353    0.1557   -0.0026
    0.1371    0.1845   -0.1111    0.1846   -0.3150   -0.1490    0.2828   -0.3799    0.2996   -0.4285


S =

   24.4281         0         0         0         0         0         0         0         0         0
         0   18.7883         0         0         0         0         0         0         0         0
         0         0   15.7581         0         0         0         0         0         0         0
         0         0         0   14.6169         0         0         0         0         0         0
         0         0         0         0    7.9410         0         0         0         0         0
         0         0         0         0         0    7.6759         0         0         0         0
         0         0         0         0         0         0    2.1204         0         0         0
         0         0         0         0         0         0         0    0.0000         0         0
         0         0         0         0         0         0         0         0    0.0000         0
         0         0         0         0         0         0         0         0         0    0.0000


V =

    0.2716   -0.4218   -0.1605    0.4999    0.1748    0.1911    0.0804    0.1533   -0.1155   -0.6020
    0.6553   -0.4909   -0.0763   -0.3146   -0.0685    0.0335    0.0746   -0.1978   -0.1694    0.3816
    0.2085    0.0264    0.4384    0.2876   -0.4154    0.1110    0.2947   -0.2779    0.5755   -0.0296
   -0.3262   -0.4206    0.5255   -0.1456   -0.3320    0.2976   -0.0867    0.3829   -0.2568    0.0198
   -0.1707   -0.1444   -0.4837    0.2506   -0.2062    0.4858   -0.4172   -0.0177    0.2917    0.3394
    0.1937   -0.0405    0.3731    0.0911    0.1272   -0.2302   -0.8256   -0.2141    0.0513   -0.1188
   -0.4569   -0.3839   -0.1204    0.1777   -0.1997   -0.3565    0.0924   -0.6068   -0.2310   -0.0265
    0.0798   -0.1255   -0.0542    0.4087   -0.1702   -0.6124    0.0083    0.5226    0.0754    0.3536
    0.2544    0.4485   -0.0989    0.1852   -0.5988    0.0747   -0.1076   -0.0510   -0.5508   -0.0911
   -0.0213    0.1295    0.3157    0.4932    0.4426    0.2543    0.1335   -0.1532   -0.3326    0.4769

Ar = U(:, 1:r) * S(1:r, 1:r) * V(:, 1:r)'

Ar =

   -0.4542   -2.0476    1.8376   -2.5342   -1.2951    2.0097   -2.8829    0.6890    3.0507    2.6183
    1.4074    3.0798    6.3720   -1.2526   -5.5803    4.3499   -5.4401    1.8222    3.6505    3.8586
   -2.9619   -3.4327   -2.1671    1.6352   -0.1062   -1.3363   -0.8240   -4.1927   -2.4492    1.1433
   -0.9623    3.6657    1.3360   -0.3502   -4.1088    2.3579   -2.2006    0.6284    0.3286   -1.0644
    4.9691    4.4721    0.3304   -2.6033    3.5751   -1.4475   -0.6064    1.1230    1.6868   -0.6268
   -4.1148   -0.8211    0.1667   -0.4571   -2.4733    0.1300   -2.7340   -2.0246    1.7026   -1.0407
   -1.7836   -2.6335    0.7356    5.0576   -1.9261    0.5628    1.8487   -1.3173   -3.3237    1.6472
    2.3840   -3.4819    1.4672   -1.5573    0.7737    1.0797    1.5168    3.2674    1.0224    3.5267
   -3.1630   -2.7138   -2.5006    0.0349    0.1670   -2.3586    3.5230    0.6824   -0.7522   -3.1377
    0.4581   -4.9388    0.4797    3.5554    2.5234   -1.0956    4.8670    1.2395   -1.2502    1.4564
   -2.0309    4.8491    2.5393   -0.9216   -1.2998    1.0375   -6.1035   -2.4948    5.1910   -2.5628
   -7.2648   -7.2197   -2.5320    2.8863   -1.1702   -1.3476    3.5758   -1.2932   -1.3026   -2.2641
   -0.6344    0.8100    1.3306    1.0837   -0.8667    0.5620    1.3943    1.8246    1.0690   -1.7256
    3.0781    0.8570    0.6763   -0.4879   -0.0842    1.8846    0.9827    2.4820   -1.0107    1.8126
    0.4412   -3.8905    0.6250    7.1236    2.5733   -0.3604    6.3495    0.7144   -3.2229    0.6996
   -0.5876   -4.7713   -0.9162   -2.2513    4.6977   -3.4327    1.2953    0.0243    3.5277   -0.3580
   -4.8914   -8.8209   -2.0340   -6.1637    0.1208   -2.3400   -2.7229   -1.5763    3.9786    2.1223
    2.3790    5.9633   -4.4418   -5.6776    1.2987   -1.0338   -0.2471    1.3724   -0.9101   -4.1958
   -0.9963   -5.0591    0.2085   -2.1131    0.3081    0.6577   -0.0840    1.1062    1.9412    2.3819
    0.4694   -0.0443    1.8870   -3.4258    0.1606   -0.4488   -1.2090    2.1608    4.4282   -0.1622


% Proof of approximation using Frobenius norm. It is close to 0, so this is a very good approximation.
closeness = norm(A - Ar, 'fro')

closeness =

   4.8249e-12


% Part (d)

% Find psuedoinverse of Ar, where Ar_dagger = Vr * inv(Sr) * Ur'
Ur = U(:, 1:r)

Ur =

    0.1002    0.2738    0.1215    0.1915    0.0569   -0.0388   -0.3706
    0.3852    0.1712    0.4702    0.2124   -0.0245   -0.1209    0.3308
   -0.2000    0.1145    0.0717   -0.2162    0.3497    0.3635    0.0839
    0.1987    0.0033    0.1907   -0.1787   -0.0058   -0.3130    0.0058
    0.2095   -0.1532   -0.3163    0.1826   -0.1246    0.2510    0.2112
    0.0212    0.2459    0.1106   -0.2602   -0.0811   -0.0112    0.0141
   -0.2087   -0.0867    0.3368   -0.0706    0.1167    0.0535    0.2426
   -0.0405    0.0620    0.0247    0.4626    0.0793   -0.1828   -0.0880
   -0.2184    0.0253   -0.1714   -0.1646   -0.1803   -0.3735    0.3179
   -0.2984   -0.1047    0.0433    0.2595   -0.1777    0.0383    0.0669
    0.3211    0.1985    0.0729   -0.2951   -0.4578    0.3064   -0.3644
   -0.4198    0.1843    0.0787   -0.2857   -0.1672   -0.3213   -0.1702
    0.0146   -0.0509    0.0574   -0.0118   -0.3553   -0.2798    0.0018
    0.0627   -0.1313    0.0409    0.2450    0.1771   -0.1841   -0.2385
   -0.3607   -0.2925    0.1651    0.1620   -0.2528    0.0928   -0.2038
   -0.1594    0.2134   -0.3362    0.1952   -0.3258    0.2246    0.0419
   -0.1601    0.6553   -0.1849    0.0763    0.2124    0.0104    0.1681
    0.2103   -0.1509   -0.5116   -0.1798    0.2320   -0.3318   -0.1614
   -0.0904    0.2554    0.0085    0.2442    0.0664   -0.1126   -0.3648
    0.1371    0.1845   -0.1111    0.1846   -0.3150   -0.1490    0.2828

Sr = S(1:r, 1:r)

Sr =

   24.4281         0         0         0         0         0         0
         0   18.7883         0         0         0         0         0
         0         0   15.7581         0         0         0         0
         0         0         0   14.6169         0         0         0
         0         0         0         0    7.9410         0         0
         0         0         0         0         0    7.6759         0
         0         0         0         0         0         0    2.1204

Vr = V(:, 1:r)

Vr =

    0.2716   -0.4218   -0.1605    0.4999    0.1748    0.1911    0.0804
    0.6553   -0.4909   -0.0763   -0.3146   -0.0685    0.0335    0.0746
    0.2085    0.0264    0.4384    0.2876   -0.4154    0.1110    0.2947
   -0.3262   -0.4206    0.5255   -0.1456   -0.3320    0.2976   -0.0867
   -0.1707   -0.1444   -0.4837    0.2506   -0.2062    0.4858   -0.4172
    0.1937   -0.0405    0.3731    0.0911    0.1272   -0.2302   -0.8256
   -0.4569   -0.3839   -0.1204    0.1777   -0.1997   -0.3565    0.0924
    0.0798   -0.1255   -0.0542    0.4087   -0.1702   -0.6124    0.0083
    0.2544    0.4485   -0.0989    0.1852   -0.5988    0.0747   -0.1076
   -0.0213    0.1295    0.3157    0.4932    0.4426    0.2543    0.1335

Ar_dagger = Vr * inv(Sr) * Ur'

Ar_dagger =

  Columns 1 through 11

   -0.0135    0.0119    0.0070   -0.0136    0.0267   -0.0168    0.0069    0.0076   -0.0081    0.0070   -0.0280
   -0.0229    0.0103   -0.0025    0.0071    0.0168    0.0004    0.0043   -0.0174    0.0090   -0.0070    0.0019
   -0.0467    0.0663   -0.0052    0.0001    0.0359    0.0045    0.0345   -0.0095    0.0384    0.0228   -0.0230
    0.0060   -0.0126    0.0007   -0.0067   -0.0054    0.0029    0.0039   -0.0114   -0.0217    0.0114    0.0426
    0.0657   -0.0869   -0.0080   -0.0311   -0.0099   -0.0113   -0.0568    0.0107   -0.0777   -0.0001    0.0919
    0.1506   -0.1104   -0.0395    0.0120   -0.0961   -0.0058   -0.0881    0.0440   -0.1223   -0.0295    0.1274
   -0.0218    0.0089   -0.0238    0.0075    0.0045   -0.0063    0.0074    0.0076    0.0386    0.0161   -0.0328
    0.0039    0.0159   -0.0439    0.0201   -0.0086   -0.0065   -0.0091    0.0248    0.0300    0.0078   -0.0248
    0.0234   -0.0083   -0.0296   -0.0042    0.0039    0.0074   -0.0278    0.0035   -0.0088    0.0078    0.0599
   -0.0107    0.0329    0.0319   -0.0127    0.0133   -0.0089    0.0275    0.0094   -0.0110    0.0047   -0.0457

  Columns 12 through 20

   -0.0375   -0.0144    0.0019   -0.0046    0.0035   -0.0007   -0.0045   -0.0136    0.0049
   -0.0163    0.0036   -0.0111   -0.0109   -0.0072   -0.0180    0.0068   -0.0283    0.0074
   -0.0263    0.0162   -0.0388   -0.0095    0.0195    0.0083   -0.0555   -0.0512    0.0556
    0.0084    0.0069   -0.0038    0.0378    0.0048   -0.0348   -0.0307    0.0011   -0.0157
    0.0117   -0.0105    0.0342    0.0550    0.0276   -0.0349    0.0171    0.0655   -0.0527
    0.0696    0.0035    0.1045    0.0752   -0.0367   -0.0689    0.0653    0.1469   -0.1115
    0.0117    0.0222   -0.0021    0.0066    0.0031   -0.0066    0.0034   -0.0130    0.0239
    0.0177    0.0298    0.0177    0.0019   -0.0061   -0.0068    0.0193    0.0109    0.0245
    0.0140    0.0224   -0.0027    0.0206    0.0326   -0.0083   -0.0130    0.0206    0.0168
   -0.0371   -0.0286   -0.0031   -0.0168   -0.0066    0.0263   -0.0258   -0.0127    0.0005


% Find solution of xr by using the psuedoinverse
xr = Ar_dagger * b

xr =

    1.2055
    0.2927
   -0.0975
   -0.4242
    0.4032
   -0.2244
    0.4739
    0.5803
   -0.4545
    0.4655


% Part (e)

% Calculate the residual norm for the new solution: ||A*x_r - b||
residual_norm_xr = norm(A * xr - b)

residual_norm_xr =

   3.4251e-05


% Calculate the norm of the new solution: ||x_r||
norm_xr = norm(xr)

norm_xr =

    1.7105


% Part (f)

% Overall we want a small norm. Looking at the norm for xr and x_hat we find that xr has a
% much smaller norm (around 1,000,000 times less!). Our error has only increases a little bit based on the residual. So,
% xr is a much better solution since it only increases our error by a small amount and increases our stability tremendously.

diary off;
